import {toSnakeCase} from '../helpers';
import {MDObject} from '../parser/types';

export default function generateTables(tableObjects: MDObject):string {
    const regex = /.*\(.*#(.*)\)/gm;
    let tableSchema = '';
    for (const [key, value] of Object.entries(tableObjects)) {
      //Exclude metadata table since it is linked to everything
      if(Array.isArray(value) && value.length > 0) {
        tableSchema = tableSchema + `Table ${toSnakeCase(key)} {\n`;
        value.forEach((row) => {
          if (row.typ) {
            //Reference to another table
            let ref = '';
            if (row.typ.includes('#')) {
              const t = row.typ.trim().split("#");
              if(t[1]) {
                //Ugly but reg ex above not working in node ???
                const tbl = toSnakeCase(t[1].replace(")",'').replace('~', ''));
                //Remove relations to metadata table since it messes up the visualisaion
                if (tbl !== 'metadata' && tableObjects[tbl]) {
                  let dir = '<';
                  switch (row.mult) {
                    case "0 - 1":
                      dir = '-'; //One-to-One;
                      break;
                    case "1":
                      dir = '-';
                      break;
                    case "1 - n":
                      dir = '<';
                      break;
                  }
                  ref = `[ref: ${dir} ${tbl}.id]`;
                  //Add an id reference is not already existing
                  if (tableObjects[tbl].filter((i) => i.attribute == 'id').length == 0) {
                    tableObjects[tbl].push({attribute: 'id', typ: 'uuid', mult:'', enum:'',  desc: 'autogenerated id'});
                    row.typ = 'uuid';
                  } else {
                    row.typ = tableObjects[tbl].filter((i) => i.attribute == 'id')[0].typ;
                  }
                } else {
                  //This is an reference to an unknown table
                  row.typ = 'uuid'
  
                  ref = (tbl === 'metadata')?"[note: 'Metadata table relation excluded']":"[note: '!!!Missing table relation']";
                }
              }
            } else {
              const t = row.typ.trim().split("]")
              let tt = row.typ.trim()
              if (t.length == 2) {
                tt = t[0].replace("[",'');
              }
              //Special cases
              switch (tt) {
                case 'KeyValues':
                  row.typ = 'json';
                  break;
                case '?':
                  row.typ = 'string';
                  break;  
                default:
                  row.typ = tt;
              }
              //Set ref to column description instead
              ref = (row.desc) ? `[note: '${row.desc.replace("'",'').replace('https://','')}']`:  `[note: '${row.desc}']`
            }
            tableSchema = tableSchema + `\t${toSnakeCase(row.attribute)} ${row.typ} ${ref}\n`;
          } else {
            //console.log(row);
          }
        })
        tableSchema = tableSchema + '}\n\n';
      }
    }
    return tableSchema;
  }
  
  